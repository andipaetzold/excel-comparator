{"version":3,"sources":["components/CompareOptions/index.tsx","services/getColumnName.ts","components/Download/index.tsx","components/SheetTable/index.tsx","components/Result/index.tsx","components/Side/UploadExcel.tsx","components/Side/index.tsx","services/extractData.ts","services/extractSheet.ts","services/extractHeaders.ts","App.tsx","index.tsx"],"names":["CompareOptions","headersLeft","headersRight","onChange","useState","left","right","options","setOptions","setLeftOption","useCallback","optionIndex","value","prev","map","o","i","setRightOption","useEffect","lastOption","length","opt","slice","optionTuple","gutter","span","style","width","v","Option","header","getColumnName","index","String","fromCharCode","charCodeAt","Download","sheet","handleClick","data","headers","column","t","Object","entries","columnIndex","item","cell","workbook","XLSX","utils","book_new","book_append_sheet","writeFile","createPDF","onClick","SheetTable","columns","dataIndex","toString","render","key","title","scroll","x","size","dataSource","rowKey","_row","footer","Result","sheetLeft","sheetRight","sheetInModal","setSheetInModal","isEqual","option","isEqualLeft","row1","row2","isEqualRight","missingLeft","useMemo","filter","rowLeft","find","rowRight","missingRight","matchingLeft","matchingRight","duplicateLeft","index1","_","index2","duplicateRight","type","visible","undefined","onOk","cancelButtonProps","display","UploadExcel","onUpload","handleUpload","object","file","reader","FileReader","onloadend","readyState","DONE","Uint8Array","result","read","Sheets","SheetNames","readAsArrayBuffer","textAlign","marginBottom","accept","showUploadList","customRequest","Side","onSheet","getValue","w","trim","extractSheet","headerCell","push","extractHeaders","headerCount","row","headerIndex","headerChar","values","extractData","App","excelSheetLeft","setSheetLeft","excelSheetRight","setSheetRight","margin","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b59054db.chunk.js","sourcesContent":["import { Card, Col, Row, Select } from \"antd\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport CompareOption from \"../../types/CompareOption\";\n\ninterface Props {\n    headersLeft: string[];\n    headersRight: string[];\n    onChange: (options: CompareOption[]) => void;\n}\n\nexport default function CompareOptions({ headersLeft, headersRight, onChange }: Props) {\n    const [options, setOptions] = useState<CompareOption[]>([{ left: null, right: null }]);\n\n    const setLeftOption = useCallback(\n        (optionIndex: number, value: number | null) => {\n            setOptions(prev =>\n                prev.map((o, i) => ({\n                    ...o,\n                    left: i === optionIndex ? value : o.left\n                }))\n            );\n        },\n        [setOptions]\n    );\n\n    const setRightOption = useCallback(\n        (optionIndex: number, value: number | null) => {\n            setOptions(prev =>\n                prev.map((o, i) => ({\n                    ...o,\n                    right: i === optionIndex ? value : o.right\n                }))\n            );\n        },\n        [setOptions]\n    );\n\n    useEffect(() => {\n        const lastOption = options[options.length - 1];\n        if (lastOption.left !== null && lastOption.right !== null) {\n            setOptions(opt => [...opt, { left: null, right: null }]);\n        }\n    }, [options, setOptions]);\n\n    useEffect(() => onChange(options.slice(0, -1)), [onChange, options]);\n\n    return (\n        <Card>\n            {options.map((optionTuple, optionIndex) => (\n                <Row key={optionIndex} gutter={10}>\n                    <Col span={12}>\n                        <Select<number | null>\n                            style={{ width: \"100%\" }}\n                            value={optionTuple.left}\n                            onChange={v => setLeftOption(optionIndex, v)}\n                        >\n                            <Select.Option key={\"null\"} value={null as any}>\n                                ---\n                            </Select.Option>\n                            {headersLeft.map((header, value) => (\n                                <Select.Option key={header} value={value}>\n                                    {header}\n                                </Select.Option>\n                            ))}\n                        </Select>\n                    </Col>\n                    <Col span={12}>\n                        <Select<number | null>\n                            style={{ width: \"100%\" }}\n                            value={optionTuple.right}\n                            onChange={v => setRightOption(optionIndex, v)}\n                        >\n                            <Select.Option key={\"null\"} value={null as any}>\n                                ---\n                            </Select.Option>\n                            {headersRight.map((header, value) => (\n                                <Select.Option key={header} value={value}>\n                                    {header}\n                                </Select.Option>\n                            ))}\n                        </Select>\n                    </Col>\n                </Row>\n            ))}\n        </Card>\n    );\n}\n","export default function getColumnName(index: number) {\n    return String.fromCharCode(\"A\".charCodeAt(0) + index);\n}\n","import { Button } from \"antd\";\nimport { useCallback } from \"react\";\nimport getColumnName from \"../../services/getColumnName\";\nimport Sheet from \"../../types/Sheet\";\nimport XLSX, { CellObject } from \"xlsx\";\n\ninterface Props {\n    sheet: Sheet;\n}\n\nexport default function Download({ sheet }: Props) {\n    const handleClick = useCallback(() => {\n        createPDF(sheet);\n    }, [sheet]);\n\n    return <Button onClick={handleClick}>Download</Button>;\n}\n\nfunction createPDF(sheet: Sheet) {\n    const data: { [ref: string]: CellObject | string } = {};\n\n    for (let i = 0; i < sheet.headers.length; ++i) {\n        const column = getColumnName(i);\n        const headerCell = `${column}1`;\n\n        data[headerCell] = { v: sheet.headers[i], t: \"s\" };\n    }\n\n    for (let i = 0; i < sheet.data.length; ++i) {\n        for (const [columnIndex, item] of Object.entries(sheet.data[i])) {\n            const ref = `${getColumnName(+columnIndex)}${i + 1}`;\n            data[ref] = item.cell;\n        }\n    }\n\n    data[\"!ref\"] = `A1:${getColumnName(sheet.headers.length - 1)}${sheet.data.length + 1}`;\n\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, data, \"Export\");\n    XLSX.writeFile(workbook, \"download.xlsx\");\n}\n","import { Table } from \"antd\";\nimport { ColumnProps } from \"antd/lib/table\";\nimport Sheet from \"../../types/Sheet\";\nimport Download from \"../../components/Download\";\n\ninterface Props {\n    sheet: Sheet;\n}\n\nexport default function SheetTable({ sheet }: Props) {\n    const columns: ColumnProps<any>[] = sheet.headers.map(\n        (header, index) =>\n            ({\n                dataIndex: index.toString(),\n                render: ({ value }) => value,\n                key: index,\n                title: header\n            } as ColumnProps<any>)\n    );\n\n    return (\n        <Table\n            columns={columns}\n            scroll={{ x: true }}\n            size=\"small\"\n            dataSource={sheet.data}\n            rowKey={(_row, index) => index.toString()}\n            footer={() => <Download sheet={sheet} />}\n        />\n    );\n}\n","import { useCallback, useMemo, useState } from \"react\";\nimport CompareOption from \"../../types/CompareOption\";\nimport Sheet from \"../../types/Sheet\";\nimport { Modal, Button } from \"antd\";\nimport SheetTable from \"../../components/SheetTable\";\n\ninterface Props {\n    sheetLeft: Sheet;\n    sheetRight: Sheet;\n    options: CompareOption[];\n}\n\nexport default function Result({ sheetLeft, sheetRight, options }: Props) {\n    const [sheetInModal, setSheetInModal] = useState<Sheet | undefined>();\n\n    const isEqual = useCallback(\n        (left: any, right: any) => {\n            for (const option of options) {\n                if (option.left === null || option.right === null) {\n                    continue;\n                }\n\n                if (left[option.left].value !== right[option.right].value) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n        [options]\n    );\n\n    const isEqualLeft = useCallback(\n        (row1: any, row2: any) => {\n            for (const option of options) {\n                if (option.left === null) {\n                    continue;\n                }\n\n                if (row1[option.left].value !== row2[option.left].value) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n        [options]\n    );\n\n    const isEqualRight = useCallback(\n        (row1: any, row2: any) => {\n            for (const option of options) {\n                if (option.right === null) {\n                    continue;\n                }\n\n                if (row1[option.right].value !== row2[option.right].value) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n        [options]\n    );\n\n    const missingLeft = useMemo(() => sheetLeft.data.filter(rowLeft => !sheetRight.data.find(rowRight => isEqual(rowLeft, rowRight))), [\n        sheetLeft,\n        sheetRight,\n        isEqual\n    ]);\n\n    const missingRight = useMemo(() => sheetRight.data.filter(rowRight => !sheetLeft.data.find(rowLeft => isEqual(rowLeft, rowRight))), [\n        sheetLeft,\n        sheetRight,\n        isEqual\n    ]);\n\n    const matchingLeft = useMemo(() => sheetLeft.data.filter(rowLeft => sheetRight.data.find(rowRight => isEqual(rowLeft, rowRight))), [\n        sheetLeft,\n        sheetRight,\n        isEqual\n    ]);\n\n    const matchingRight = useMemo(() => sheetRight.data.filter(rowRight => sheetLeft.data.find(rowLeft => isEqual(rowLeft, rowRight))), [\n        sheetLeft,\n        sheetRight,\n        isEqual\n    ]);\n\n    const duplicateLeft = useMemo(\n        () =>\n            sheetLeft.data.filter((row1, index1) =>\n                sheetLeft.data.filter((_, index2) => index1 !== index2).find(row2 => isEqualLeft(row1, row2))\n            ),\n        [sheetLeft, isEqualLeft]\n    );\n\n    const duplicateRight = useMemo(\n        () =>\n            sheetRight.data.filter((row1, index1) =>\n                sheetRight.data.filter((_, index2) => index1 !== index2).find(row2 => isEqualRight(row1, row2))\n            ),\n        [sheetRight, isEqualRight]\n    );\n\n    return (\n        <>\n            <ul>\n                <li>\n                    Zeilen links, die keine übereinstimmende Zeile rechts haben:{\" \"}\n                    <Button type=\"link\" onClick={() => setSheetInModal({ headers: sheetLeft.headers, data: missingLeft })}>\n                        {missingLeft.length}\n                    </Button>\n                </li>\n                <li>\n                    Zeilen rechts, die keine übereinstimmende Zeile links haben:{\" \"}\n                    <Button type=\"link\" onClick={() => setSheetInModal({ headers: sheetRight.headers, data: missingRight })}>\n                        {missingRight.length}\n                    </Button>\n                </li>\n                <li>\n                    Zeilen links, die eine übereinstimmende Zeile rechts haben:{\" \"}\n                    <Button type=\"link\" onClick={() => setSheetInModal({ headers: sheetLeft.headers, data: matchingLeft })}>\n                        {matchingLeft.length}\n                    </Button>\n                </li>\n                <li>\n                    Zeilen rechts, die eine übereinstimmende Zeile links haben:{\" \"}\n                    <Button type=\"link\" onClick={() => setSheetInModal({ headers: sheetRight.headers, data: matchingRight })}>\n                        {matchingRight.length}\n                    </Button>\n                </li>\n                <li>\n                    Duplikate Links:{\" \"}\n                    <Button type=\"link\" onClick={() => setSheetInModal({ headers: sheetLeft.headers, data: duplicateLeft })}>\n                        {duplicateLeft.length}\n                    </Button>\n                </li>\n                <li>\n                    Duplikate Rechts:{\" \"}\n                    <Button type=\"link\" onClick={() => setSheetInModal({ headers: sheetRight.headers, data: duplicateRight })}>\n                        {duplicateRight.length}\n                    </Button>\n                </li>\n            </ul>\n            <Modal\n                visible={sheetInModal !== undefined}\n                onOk={() => setSheetInModal(undefined)}\n                cancelButtonProps={{ style: { display: \"none\" } }}\n                width=\"75%\"\n            >\n                {sheetInModal && <SheetTable sheet={sheetInModal} />}\n            </Modal>\n        </>\n    );\n}\n","import { Button, Icon, Upload } from \"antd\";\nimport { useCallback } from \"react\";\nimport XLSX from \"xlsx\";\n\ninterface Props {\n    onUpload: (dataUrl: XLSX.WorkSheet) => void;\n}\n\nexport default function UploadExcel({ onUpload }: Props) {\n    const handleUpload = useCallback((object: object) => {\n        const { file } = object as { file: File };\n        const reader = new FileReader();\n\n        reader.onloadend = () => {\n            if (reader.readyState !== FileReader.DONE) {\n                return;\n            }\n\n            const data = new Uint8Array(reader.result as ArrayBuffer);\n            const workbook = XLSX.read(data, { type: \"array\" });\n            const sheet = workbook.Sheets[workbook.SheetNames[0]];\n            onUpload(sheet);\n        };\n        reader.readAsArrayBuffer(file);\n    }, [onUpload]);\n\n    return (\n        <div style={{ textAlign: \"center\", marginBottom: \"10px\" }}>\n            <Upload\n                accept=\"application/msexcel,vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n                showUploadList={false}\n                customRequest={handleUpload}\n            >\n                <Button>\n                    <Icon type=\"upload\" /> Upload\n                </Button>\n            </Upload>\n        </div>\n    );\n}\n","import Sheet from \"../../types/Sheet\";\nimport XLSX from \"xlsx\";\nimport UploadExcel from \"./UploadExcel\";\nimport SheetTable from \"../SheetTable\";\n\ninterface Props {\n    onSheet: (sheet: XLSX.Sheet) => void;\n    sheet: Sheet | undefined;\n}\n\nexport default function Side({ sheet, onSheet }: Props) {\n    return (\n        <>\n            <UploadExcel onUpload={onSheet} />\n            {sheet && <SheetTable sheet={sheet} />}\n        </>\n    );\n}\n","import XLSX, { CellObject } from \"xlsx\";\nimport getColumnName from \"./getColumnName\";\n\nexport default function extractData(sheet: XLSX.Sheet, headerCount: number) {\n    const result = [];\n    let i = 2;\n    while (true) {\n        const row: { [ref: string]: { cell: CellObject; value: string } } = {};\n        for (let headerIndex = 0; headerIndex < headerCount; ++headerIndex) {\n            const headerChar = getColumnName(headerIndex);\n            const cellRef = `${headerChar}${i}`;\n\n            const cell: CellObject = sheet[cellRef];\n            row[headerIndex] = {\n                cell,\n                value: getValue(cell)\n            };\n        }\n\n        if (Object.values(row).filter(cell => cell.value !== \"\").length === 0) {\n            break;\n        }\n\n        result.push(row);\n        ++i;\n    }\n\n    return result;\n}\n\nfunction getValue(cell: any): string {\n    if (!cell) {\n        return \"\";\n    } else if (cell.w) {\n        return cell.w.toString().trim();\n    } else if (cell.v) {\n        return cell.v.toString().trim();\n    } else {\n        return \"\";\n    }\n}\n","import XLSX from \"xlsx\";\nimport Sheet from \"../types/Sheet\";\nimport extractData from \"./extractData\";\nimport extractHeaders from \"./extractHeaders\";\n\nexport default function extractSheet(sheet: XLSX.Sheet): Sheet {\n    const headers = extractHeaders(sheet);\n    const data = extractData(sheet, headers.length);\n\n    return { headers, data };\n}\n","import XLSX from \"xlsx\";\nimport getColumnName from \"./getColumnName\";\n\nexport default function extractHeaders(sheet: XLSX.Sheet) {\n    const result = [];\n\n    let i = 0;\n    while (true) {\n        const column = getColumnName(i);\n        const headerCell = `${column}1`;\n\n        if (sheet[headerCell] === undefined) {\n            break;\n        }\n        result.push(sheet[headerCell].v);\n\n        ++i;\n    }\n\n    return result;\n}\n","import { Card, Col, Row } from \"antd\";\nimport CompareOptions from \"./components/CompareOptions\";\nimport Result from \"./components/Result\";\nimport Side from \"./components/Side\";\nimport { useMemo, useState } from \"react\";\nimport extractSheet from \"./services/extractSheet\";\nimport CompareOption from \"./types/CompareOption\";\nimport XLSX from \"xlsx\";\n\nexport default function App() {\n    const [excelSheetLeft, setSheetLeft] = useState<XLSX.WorkSheet | undefined>();\n    const [excelSheetRight, setSheetRight] = useState<XLSX.WorkSheet | undefined>();\n    const [options, setOptions] = useState<CompareOption[]>([]);\n\n    const sheetLeft = useMemo(() => {\n        if (!excelSheetLeft) {\n            return undefined;\n        }\n        return extractSheet(excelSheetLeft);\n    }, [excelSheetLeft]);\n\n    const sheetRight = useMemo(() => {\n        if (!excelSheetRight) {\n            return undefined;\n        }\n        return extractSheet(excelSheetRight);\n    }, [excelSheetRight]);\n\n    return (\n        <div style={{ margin: \"5px\" }}>\n            {sheetLeft && sheetRight && (\n                <div style={{ marginBottom: \"10px\" }}>\n                    <CompareOptions headersLeft={sheetLeft.headers} headersRight={sheetRight.headers} onChange={setOptions} />\n                </div>\n            )}\n            {sheetLeft && sheetRight && (\n                <Card style={{ marginBottom: \"10px\" }}>\n                    <Result options={options} sheetLeft={sheetLeft} sheetRight={sheetRight} />\n                </Card>\n            )}\n            <Card>\n                <Row gutter={10}>\n                    <Col span={12}>\n                        <Side sheet={sheetLeft} onSheet={setSheetLeft} />\n                    </Col>\n                    <Col span={12}>\n                        <Side sheet={sheetRight} onSheet={setSheetRight} />\n                    </Col>\n                </Row>\n            </Card>\n        </div>\n    );\n}\n","import ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}